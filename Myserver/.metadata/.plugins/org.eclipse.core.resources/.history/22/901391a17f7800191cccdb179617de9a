package com.ma.server;

import javax.naming.InitialContext;

import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelHandler;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.handler.codec.mqtt.MqttMessageBuilders.PublishBuilder;

public class Server4HelloWorld {

	
	private EventLoopGroup acceptorGroup=null;
	
	private EventLoopGroup clientGroup=null;
	
	private ServerBootstrap bootstrap=null;
	
	public Server4HelloWorld()
	{
		init();
	}

	private void init() {
		acceptorGroup=new NioEventLoopGroup();
		clientGroup=new NioEventLoopGroup();
		bootstrap=new ServerBootstrap();
		
		bootstrap.group(acceptorGroup,clientGroup).channel(NioServerSocketChannel.class).option(ChannelOption.SO_BACKLOG, 1024)          // (5)
//        .childOption(ChannelOption.SO_KEEPALIVE, true); 
	}
	
	public ChannelFuture doAccept(int port,final ChannelHandler...acceptorHandlers) throws InterruptedException
	{
		bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {
			
			@Override
			protected void initChannel(SocketChannel arg0) throws Exception {
				arg0.pipeline().addLast(acceptorHandlers);
				
			}
		});
		ChannelFuture future=bootstrap.bind(port).sync();
		return future;
	}
	
	public void release()
	{
		this.acceptorGroup.shutdownGracefully();
		this.clientGroup.shutdownGracefully();
	}
	
	
	
}
